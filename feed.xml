<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://angelring127.github.io</id><title>Hoya</title><subtitle>react, python, php, typescript, graphql등 개발 및 공부</subtitle> <updated>2021-05-16T06:56:40+09:00</updated> <author> <name>Hoya</name> <uri>https://angelring127.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://angelring127.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Hoya </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Nas를 이용해 Docker를 사용해보자</title><link href="https://angelring127.github.io/posts/Docker-01/" rel="alternate" type="text/html" title="Nas를 이용해 Docker를 사용해보자" /><published>2021-05-11T12:25:00+09:00</published> <updated>2021-05-16T06:56:11+09:00</updated> <id>https://angelring127.github.io/posts/Docker-01/</id> <content src="https://angelring127.github.io/posts/Docker-01/" /> <author> <name>Hoya</name> </author> <category term="Docker" /> <summary> 앞으로 시놀로지 Nas에서 도커(Docker)를 설치 하여 밖에서도 개발환경을 볼 수 있는 환경을 만들려고 합니다. 1. Host network (Main 네트워크) 2. Bridge network (Virtual 네트워크) 컨테이너 생성 </summary> </entry> <entry><title>WebPack 개발 편의 기능</title><link href="https://angelring127.github.io/posts/Webpack-03/" rel="alternate" type="text/html" title="WebPack 개발 편의 기능" /><published>2021-04-20T21:20:00+09:00</published> <updated>2021-05-16T06:56:11+09:00</updated> <id>https://angelring127.github.io/posts/Webpack-03/</id> <content src="https://angelring127.github.io/posts/Webpack-03/" /> <author> <name>Hoya</name> </author> <category term="Javascript" /> <summary> Webpack은 자바스크립트 개발자들이 좀 더 쾌적한 개발 경험을 할 수 있도록 여러가지 개발 편의 기능을 제공합니다. 이 번 포스트에서는 Webpack을 사용하면서 개발 편의성을 개선시킬 수 방법에 대해서 알아보겠습니다. 실습 프로젝트 먼저 실습 프로젝트를 만들겠습니다. 새로운 디렉토리를 만들고 NPM 프로젝트를 초기화 후, Webpack과 Webpack CLI 패키지를 설치합니다. mkdir webpack-development cd webpack-development npm init -y npm i -D webpack webpack-cli 그 다음, 다음과 같이 src/index.js 와 dist/index.html 파일을 작성합니다. src/index.js const mess... </summary> </entry> <entry><title>WebPack 기본 설정 방법</title><link href="https://angelring127.github.io/posts/Webpack-02/" rel="alternate" type="text/html" title="WebPack 기본 설정 방법" /><published>2021-04-19T21:20:00+09:00</published> <updated>2021-05-16T06:56:11+09:00</updated> <id>https://angelring127.github.io/posts/Webpack-02/</id> <content src="https://angelring127.github.io/posts/Webpack-02/" /> <author> <name>Hoya</name> </author> <category term="Javascript" /> <summary> Webpack 기본 설정방법 Etry/Output/Loader/Plugins React, Vue, Angular와 같은 자바스크립트 프레임워크를 기반으로 프로젝트를 하다보면 webpack.config.js라는 파일과 자주 마주치게 됩니다. 바로 Webpack 설정 파일인데요. 이번 포스트에서는 이 설정 파일을 기본으로 한 Webpack 기본 설정 방법에 대해 알아보겠습니다. 설정 파일 Webpack을 사용할 때 반드시 설정 파일이 필요하지는 않지만, 대부분의 경우에는 설정 파일을 사용합니다. 왜냐하면 터미널에서 웹팩 커맨드를 실행할 때 마다 모든 옵션들을 붙여주는게 번거롭고, 설정 파일을 소스 저장소에 올려두면 다른 개발자들은 크게 설정이 신경쓰지 않고 협업을 할 수 있기 때문입니다. 먼저 디... </summary> </entry> <entry><title>WebPack 기초</title><link href="https://angelring127.github.io/posts/Webpack-01/" rel="alternate" type="text/html" title="WebPack 기초" /><published>2021-04-18T18:10:00+09:00</published> <updated>2021-05-16T06:56:11+09:00</updated> <id>https://angelring127.github.io/posts/Webpack-01/</id> <content src="https://angelring127.github.io/posts/Webpack-01/" /> <author> <name>Hoya</name> </author> <category term="Javascript" /> <summary> Webpack 기본 사용법 (CLI) React, Vue, Angular중 어느 것을 사용하든 Webpack이라는 녀석을 사용하게 됩니다. Webpack이란 기본적으로 자바스크립트 모듈 번들러(JavaScript Module Bundler)이며 웹 개발을 도와주는 많은 부가 기능을 가지고 있습니다. 간단한 예제 프로젝트를 통해 Webpack에 대해 알아 보겠습니다. 예제 프로젝트 생성하기 먼저 webpack-example디렉토리를 생성 후 그 안에 예제 프로젝트를 시작 하겠습니다. mkdir webpack-example cd webpack-example HTML과 Javascript파일 작성 index.html &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;... </summary> </entry> <entry><title>Babel 기초</title><link href="https://angelring127.github.io/posts/Babel-01/" rel="alternate" type="text/html" title="Babel 기초" /><published>2021-04-18T18:10:00+09:00</published> <updated>2021-05-16T06:56:11+09:00</updated> <id>https://angelring127.github.io/posts/Babel-01/</id> <content src="https://angelring127.github.io/posts/Babel-01/" /> <author> <name>Hoya</name> </author> <category term="Javascript" /> <summary> 바벨(Babel 7) 기본 자바스크립트 문법은 빠르게 발달 되어가고 있습니다. 하지만 자바스크립트를 실행하는 환경은 이를 받쳐주지 못하는 경우가 많습니다. 그러한 이유로는 브라우저의 종류가 다양하여 모든 브라우저에서 동일하게 문법을 지원하는것이 아니기 때문입니다. 또한 Node.js의 경우 버전에 따라 지원하는 문법이 다르기때문에 브라우저와 동일한 문제를 가지고 있습니다. Babel: JavaScript transpiler 이러한 문제를 해결하기 위해 등장한 것이 바로 자바스크립트 트랜스파일러(transpiler)인 바벨입니다. 바벨을 이용하면 ES6 이상의 최신 문법으로 작성한 자바스크립트 코드를 ES5 이하의 예전 문법으로작성한 것 처럼 소스 코드 내의 문법의 형태를 변경할 수 있습니다. 이렇... </summary> </entry> </feed>
